datasets:
  ilsvrc2012:
    name: &dataset_name 'ilsvrc2012'
    type: 'ImageFolder'
    root: &root_dir !join [ '~/resources/datasets/', *dataset_name ]
    splits:
      train:
        dataset_id: &imagenet_train !join [ *dataset_name, '/train' ]
        params:
          root: !join [ *root_dir, '/train' ]
          transform_params:
            - type: 'RandomResizedCrop'
              params:
                size: &input_size [ 224, 224 ]
            - type: 'RandomHorizontalFlip'
              params:
                p: 0.5
            - &totensor
              type: 'ToTensor'
              params:
            - &normalize
              type: 'Normalize'
              params:
                mean: [ 0.485, 0.456, 0.406 ]
                std: [ 0.229, 0.224, 0.225 ]
      val:
        dataset_id: &imagenet_val !join [ *dataset_name, '/val' ]
        params:
          root: !join [ *root_dir, '/val' ]
          transform_params:
            - type: 'Resize'
              params:
                size: 256
            - type: 'CenterCrop'
              params:
                size: *input_size
            - *totensor
            - *normalize



models:
  lmbda: &lmbda 0.128
  distortion: &distortion 'MSELossNoKD'
  model:
    name: 'splittable_network_with_compressor'
    params:
      network_type: 'SplittableClassifierWithCompressionModule'
      analysis_config:
        analyze_after_compress: True
        analyzers_config:
          - type: 'DiskFileSizeAndBppAnalyzer'
            params:
              unit: 'KB'
      compression_module_config:
        name: 'FactorizedPriorModule'
        params:
          entropy_bottleneck_channels: &output_dim_analysis 48
          quantization_config:
            backend: 'fbgemm'
            quant_device: 'cpu'
          analysis_config:
            name: &analysis 'QuantizableSimpleAnalysisNetwork2'
            params:
                in_ch1: 48
                in_ch2: 64
                target_channels: *output_dim_analysis
          synthesis_config:
            name: &synthesis 'SynthesisNetworkCNNSwinHybridNoFinalLayer'
            params:
              deconv_preconfig:
                name: '_0x2upsample2x1stride_deconv_1stage_norb_nogdn'
                params:
                  feature_size: 28
                  bottleneck_channels: *output_dim_analysis
                  output_dim_st1: 96
                  target_dim: 192
              feature_size: 28
              window_sizes: [7]
              num_heads: [3]
              depths: [2]
              stoch_drop_rate: 0.05
              use_shortcut: True
              use_fixed_shortcut: False
      backbone_module_config:
        name: &teacher_model_name 'get_timm_model'
        params:
          swin_base: &backbone_base 'swin_s3_tiny_224'
          pretrained: True
          no_classes: 1000
          # replace first two stages with synthesis/analysis
          split_idx: 2
          assign_layer_names: False
          skip_embed: True
          reset_head: False
      reconstruction_layer_config:
        name: 'SwinReconLayer'
        params:
          embed_dim: 192
          target_dim: 384
          window_size: 7
          feature_size: 28
          depth: 2
          num_heads: 4
          tokenize_input: True
    experiment: &experiment_name !join [*analysis, '-', *synthesis, '-', *lmbda, '-', *distortion, '-', *backbone_base]
    ckpt: !join ['resources/weights/limitations-do/ce/lmbda=', *lmbda, '.pt']
    ckpt_stage1: !join ['resources/weights/', *dataset_name, '/checkpoint',*experiment_name, '-stage1.pt']
train:
  log_freq: 500
  stage1:
    epoch_to_update: &epoch_to_update 7
    eval_metrics: [ 'accuracy', 'bpp' ]
    num_epochs: *epoch_to_update
    train_data_loader:
      dataset_id: *imagenet_train
      random_sample: True
      batch_size: 16
      num_workers: 4
      cache_output:
    val_data_loader:
      dataset_id: *imagenet_val
      random_sample: False
      batch_size: 128
      num_workers: 4
    model:
      sequential: [ ]
      frozen_modules: [ ]
      forward_hook:
        input: [ ]
        output: [ 'compression_module.entropy_bottleneck' ]
      requires_grad: True
      # wrapper: 'DistributedDataParallel'
    enable_mp: True
    optimizer:
      type: 'Adam'
      params:
        lr: 0.001
      module_wise_params: [
        { params: { lr: 0.001 }, module: 'compression_module' },
      ]
    scheduler:
      type: 'ExponentialLR'
      params:
        # decay_factor = 1000
        # gamma = (1 / decay_factor) ** (1 / epochs)
        # lr last epoch = 1e-6
        gamma: 0.794328235
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        criterion:
          type: 'CrossEntropyLoss'
          params:
            reduction: 'mean'
        factor: 1.0
      sub_terms:
        bpp:
          criterion:
            type: 'BppLossOrig'
            params:
              input_sizes: *input_size
              entropy_module_path: 'compression_module.entropy_bottleneck'
              reduction: 'mean'
          factor: *lmbda
          #      sub_terms:
#        bpp:
#          criterion:
#            type: 'BppLossOrig'
#            params:
#              input_sizes: *input_size
#              entropy_module_path: 'compression_module.entropy_bottleneck'
#              reduction: 'mean'
#          factor: *lmbda
#  stage2:
#    eval_metrics: ['accuracy', 'bpp']
#    num_epochs: 5
#    skip_teacher: False
#    train_data_loader:
#      dataset_id: *imagenet_train
#      random_sample: True
#      batch_size: 96
#      num_workers: 8
#      cache_output:
#    val_data_loader:
#      dataset_id: *imagenet_val
#      random_sample: False
#      batch_size: 32
#      num_workers: 8
#    teacher:
#      sequential: []
#      frozen_modules: []
#      forward_hook:
#        input: []
#        output: []
#      requires_grad: False
#      # wrapper: 'DistributedDataParallel'
#    student:
#      adaptations:
#      sequential: []
#      frozen_modules: ['compression_module.g_a', 'compression_module.entropy_bottleneck']
#      forward_hook:
#        input: []
#        output: []
#      requires_grad: True
#      # wrapper: 'DistributedDataParallel'
#    optimizer:
#      type: 'SGD'
#      params:
#        lr: 0.0005
#        momentum: 0.9
#        weight_decay: 0.00001
#      module_wise_params: [
##        { params: { lr: 0.0005 }, module: 'compression_module.g_s' },
#        # for MSHP+
#        { params: { lr: 0.00001 }, module: 'backbone' },
#      ]
#    scheduler:
#      type: 'ExponentialLR'
#      params:
#        # decay_factor = 10
#        # gamma = (1 / decay_factor) ** (1 / epochs)
#        # lr last epoch = 0.00005
#        gamma: 0.562341325
#    criterion:
#      type: 'GeneralizedCustomLoss'
#      org_term:
#        criterion:
#          type: 'KDLoss'
#          params:
#            temperature: 1.0
#            alpha: 0.5
#            reduction: 'batchmean'
#        factor: 1.0
#      sub_terms:

test:
  eval_metrics: [ 'accuracy-and-filesize']
#  eval_metrics: [ 'psnr' ]
  test_data_loader:
    dataset_id: *imagenet_val
    random_sample: False
    batch_size: 1
    num_workers: 1